/******************************************************************************\
|                                                                              |
|                                  glass.less                                  |
|                                                                              |
|******************************************************************************|
|                                                                              |
|        This defines the dom and svg visual styles for this application.      |
|                                                                              |
|        Author(s): Abe Megahed                                                |
|                                                                              |
|        This file is subject to the terms and conditions defined in           |
|        'LICENSE.txt', which is part of this source code distribution.        |
|                                                                              |
|******************************************************************************|
|        Copyright (C) 2016-2020, Megahed Labs LLC, www.sharedigm.com          |
\******************************************************************************/

//
// glass properties
//

@glass-diffuse-strength: 25%;
@glass-specular-size: 50%;
@glass-specular-strength: 50%;
@glass-highlight-size: 25%;
@glass-highlight-strength: 100%;
@glass-transmission-strength: 100%;

@round-glass-specular-width: 50%;
@round-glass-specular-height: 25%;
@round-glass-specular-hoffset: 50%;
@round-glass-specular-voffset: 10%;

@round-glass-highlight-width: 25%;
@round-glass-highlight-height: 12%;
@round-glass-highlight-hoffset: 50%;
@round-glass-highlight-voffset: 10%;

@min-plate-glass-opacity: 70%;
@plate-glass-opacity: 80%;
@max-plate-glass-opacity: 90%;

@min-frosted-glass-opacity: 50%;
@frosted-glass-opacity: 60%;
@max-frosted-glass-opacity: 70%;
@frosted-glass-blur: 15px;

//
// glass mixins
//

.glass (@color: white, @direction: bottom, @border-style: outset, @opacity: @min-plate-glass-opacity) {
	background:

		// highlight
		//
		linear-gradient(to @direction,
			fade(white, @glass-highlight-strength) 0%,
			fade(white, 0%) 3px) no-repeat,
		
		// specular
		//
		linear-gradient(to bottom,
			fade(white, @glass-specular-strength) 0%,
			fade(white, 0%) 20%) no-repeat,

		// reflected
		//
		linear-gradient(to bottom,
			fade(@color, 0%) 50%,
			lighten(@color, 10%) 100%) no-repeat,

		// diffuse
		//
		linear-gradient(to bottom,
			fade(darken(@color, 20%), 100%) 0%,
			fade(@color, @opacity) 100%) no-repeat;

	// borders
	//
	& when (@border-style = inset) {
		border-color: lighten(@color, 10%);
	}
	& when (@border-style = outset) {
		border-color: darken(@color, 10%);
	}
}

.opaque-glass (@color: white, @direction: bottom, @border-style: outset) {
	.glass(@color, @direction, @border-style);
	background-color: darken(@color, 25%);
}

.round-glass (@color: white, @direction: bottom, @border-style: outset) {
	background:

		// highlight
		//
		radial-gradient(ellipse @round-glass-highlight-width @round-glass-highlight-height at @round-glass-highlight-hoffset @round-glass-highlight-voffset,
			fade(white, @glass-highlight-strength) 0%, 
			fade(white, @glass-highlight-strength) @glass-highlight-size,
			fade(white, 0%) 100%) no-repeat,

		// specular
		//
		radial-gradient(ellipse @round-glass-specular-width @round-glass-specular-height at @round-glass-specular-hoffset @round-glass-specular-voffset,
			fade(white, @glass-specular-strength) 0%, 
			fade(white, @glass-specular-strength) @glass-specular-size,
			fade(white, 0%) 100%) no-repeat,

		// transmitted
		//
		radial-gradient(ellipse 50% 50% at 50% 85%,
			fade(lighten(@color, 30%), @glass-transmission-strength) 0%, 
			fade(@color, @glass-transmission-strength) 50%, 
			fade(@color, 0%) 100%) no-repeat,

		// reflected
		//
		linear-gradient(to @direction,
			fade(@color, 0%) 33%,
			fade(@color, 50%) 100%) no-repeat,

		// diffuse
		//
		darken(@color, 20%);

	// borders
	//
	& when (@border-style = inset) {
		border-color: lighten(@color, 20%);
	}
	& when (@border-style = outset) {
		border-color: darken(@color, 20%);
	}
}

.round-opaque-glass (@color: white, @direction: bottom, @border-style: outset) {
	.round-glass(@color, @direction, @border-style);
	background-color: darken(@color, 25%);
}

.rounded-glass (@color: white, @direction: bottom, @border-style: outset, @border-radius: 10px) {
	& when (@direction = top) or (@direction = bottom) {
		background:

			// left shading
			//
			linear-gradient(to right,
				fade(darken(@color, 20%), 50%) 0%,
				fade(darken(@color, 20%), 0) @border-radius) no-repeat,

			// right shading
			//
			linear-gradient(to left,
				fade(darken(@color, 20%), 50%) 0%,
				fade(darken(@color, 20%), 0) @border-radius) no-repeat,

			// highlight
			//
			linear-gradient(to @direction,
				fade(white, 25%) 0%,
				fade(white, @glass-highlight-strength) 10%,
				fade(white, 0%) 30%) no-repeat,

			// transmitted
			//
			linear-gradient(to @direction,
				fade(@color, 0%) 33%,
				fade(@color, @glass-transmission-strength) 75%,
				fade(@color, @glass-transmission-strength / 2) 100%) no-repeat,

			// diffuse
			//
			darken(@color, 30%);
	}

	& when (@direction = left) or (@direction = right) {
		background:

			// top shading
			//
			linear-gradient(to bottom,
				fade(darken(@color, 20%), 50%) 0%,
				fade(darken(@color, 20%), 0) @border-radius) no-repeat,

			// bottom shading
			//
			linear-gradient(to top,
				fade(darken(@color, 20%), 50%) 0%,
				fade(darken(@color, 20%), 0) @border-radius) no-repeat,

			// highlight
			//
			linear-gradient(to @direction,
				fade(white, 25%) 0%,
				fade(white, @glass-highlight-strength) 10%,
				fade(white, 0%) 30%) no-repeat,

			// transmitted
			//
			linear-gradient(to @direction,
				fade(@color, 0%) 33%,
				fade(@color, @glass-transmission-strength) 75%,
				fade(@color, @glass-transmission-strength / 2) 100%) no-repeat,

			// diffuse
			//
			darken(@color, 30%);
	}

	// borders
	//
	& when (@border-style = inset) {
		border-color: lighten(@color, 20%);
	}
	& when (@border-style = outset) {
		border-color: darken(@color, 20%);
	}
}

.rounded-opaque-glass (@color: white, @direction: bottom, @border-style: outset) {
	.rounded-glass(@color, @direction, @border-style);
	background-color: darken(@color, 25%);
}

.square-glass (@color: white, @direction: bottom, @border-style: outset) {
	.rounded-glass(@color, @direction, @border-style, 0);
}

.square-opaque-glass (@color: white, @direction: bottom, @border-style: outset) {
	.rounded-opaque-glass(@color, @direction, @border-style, 0);
}

.long-round-glass (@color: white, @direction: bottom, @border-style: outset, @width: 10px) {
	& when (@direction = top) or (@direction = bottom) {
		background:

			// left shading
			//
			linear-gradient(to right,
				fade(darken(@color, 25%), @glass-highlight-strength) 0%,
				fade(darken(@color, 25%), 0) (@width / 2)) no-repeat,

			// right shading
			//
			linear-gradient(to left,
				fade(darken(@color, 25%), @glass-highlight-strength) 0%,
				fade(darken(@color, 25%), 0) (@width / 2)) no-repeat,

			// highlight
			//
			linear-gradient(to @direction,
				fade(white, 0%) 0%,
				fade(white, @glass-highlight-strength) 25%,
				fade(white, 0%) 50%) no-repeat,

			// transmitted
			//
			linear-gradient(to @direction,
				fade(@color, 0%) 50%,
				fade(@color, @glass-transmission-strength) 75%,
				fade(@color, 0%) 100%) no-repeat,

			// diffuse
			//
			linear-gradient(to @direction,
				fade(darken(@color, 30%), 100%) 0%,
				fade(darken(@color, 10%), 100%) 100%) no-repeat;
	}

	& when (@direction = left) or (@direction = right) {
		background:

			// top shading
			//
			linear-gradient(to bottom,
				fade(darken(@color, 25%), @glass-highlight-strength) 0%,
				fade(darken(@color, 25%), 0) (@width / 2)) no-repeat,

			// bottom shading
			//
			linear-gradient(to top,
				fade(darken(@color, 25%), @glass-highlight-strength) 0%,
				fade(darken(@color, 25%), 0) (@width / 2)) no-repeat,

			// highlight
			//
			linear-gradient(to @direction,
				fade(white, 0%) 0%,
				fade(white, @glass-highlight-strength) 25%,
				fade(white, 0%) 50%) no-repeat,

			// transmitted
			//
			linear-gradient(to @direction,
				fade(@color, 0%) 50%,
				fade(@color, @glass-transmission-strength) 75%,
				fade(@color, 0%) 100%) no-repeat,

			// diffuse
			//
			linear-gradient(to @direction,
				fade(darken(@color, 20%), 100%) 0%,
				fade(darken(@color, 10%), 100%) 100%) no-repeat;
	}

	// borders
	//
	& when (@border-style = inset) {
		border-color: darken(@color, 20%);
	}
	& when (@border-style = outset) {
		border-color: darken(@color, 20%);
	}
}

.plate-glass (@color: white, @opacity: @plate-glass-opacity, @max-opacity: @max-plate-glass-opacity) {
	background:

		// specular
		//
		linear-gradient(to bottom,
			fade(@color, @max-opacity) 0%,
			fade(@color, 0%) 100%) no-repeat,	

		// diffuse
		//
		fade(@color, @opacity);
}

//
// clear, unfrosted glass
//

.clear () {
	background-color: transparent;
	.unfrosted();
}

//
// frosted glass
//

.unfrosted () {
	backdrop-filter: none;
	-webkit-backdrop-filter: none;
}

.frosted (@blur: @frosted-glass-blur) {
	backdrop-filter: blur(@blur);
	-webkit-backdrop-filter: blur(@blur);
}

.frosted-glass (@color: white, @direction: bottom, @border-style: outset, @opacity: @min-frosted-glass-opacity, @blur: @frosted-glass-blur) {
	.glass(@color, @direction, @border-style, @opacity);
	.frosted(@frosted-glass-blur);
}

.frosted-plate-glass (@color: white, @opacity: @frosted-glass-opacity, @max-opacity: @max-frosted-glass-opacity, @blur: @frosted-glass-blur) {
	.plate-glass(@color, @opacity, @max-opacity);
	.frosted(@frosted-glass-blur);
}

.rounded-frosted-glass (@color: white, @direction: bottom, @border-style: outset, @opacity: @frosted-glass-opacity, @blur: 3px) {
	background:

		// highlight
		//
		linear-gradient(to @direction,
			fade(white, @glass-highlight-strength) 0%,
			fade(white, 0%) 3px) no-repeat,
		
		// specular
		//
		linear-gradient(to bottom,
			fade(lighten(@color, 10%), 50%) 0%,
			fade(lighten(@color, 10%), 0%) 100%) no-repeat,

		// reflected
		//
		linear-gradient(to bottom,
			fade(lighten(@color, 10%), @opacity) 0,
			fade(@color, @opacity) 50%,
			fade(lighten(@color, 10%), @opacity) 100%) no-repeat;

	.frosted(@blur);

	// borders
	//
	& when (@border-style = inset) {
		border-color: lighten(@color, 10%);
	}
	& when (@border-style = outset) {
		border-color: darken(@color, 10%)
	}
}

//
// reflective glass (gradient reflections)
//

.reflective-plate-glass (@color: white, @opacity: @plate-glass-opacity, @max-opacity: @max-plate-glass-opacity) {
	background:

		// highlight
		//
		repeating-linear-gradient(-30deg,
			fade(white, 100%) 0%,
			fade(white, 50%) 100px,
			fade(white, 75%) 200px,
			fade(white, 50%) 300px,
			fade(white, 100%) 400px),

		// specular
		//
		linear-gradient(to bottom,
			fade(@color, @max-opacity) 0%,
			fade(@color, 0%) 100%);

	background-position: 0 0; 
	// background-attachment: fixed;
}